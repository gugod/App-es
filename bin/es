#!/usr/bin/perl

use strict;
use warnings;

use App::es;

use encoding 'utf8';
use Term::ANSIColor;
use File::Slurp qw{ read_file };
use JSON        qw{ decode_json to_json };

use ElasticSearch;

# get args
my $cmd = shift or do {
    print "es - version $App::es::VERSION\n\n";
    require Pod::Usage;
    Pod::Usage::pod2usage();
};

die "illegal command\n" unless App::es->is_command( $cmd );

my $app = App::es->new_with_options;

my @params = @ARGV;

my $es = $app->es;

my @aliases = @{ $app->_get_elastic_search_aliases };

$app->validate_params($cmd => \@params);

( $cmd eq 'ls'       ) and $app->command_ls       ( @params );
( $cmd eq 'ls-types' ) and $app->command_ls_types ( @params );
( $cmd eq 'ls-aliases' ) and $app->command_ls_aliases ( @params );
( $cmd eq 'get-mapping'  ) and $app->command_get_mapping ( @params );
( $cmd eq 'get-settings' ) and $app->command_get_settings( @params );
( $cmd eq 'put-mapping'  ) and $app->command_put_mapping ( @params );
( $cmd eq 'put-settings' ) and $app->command_put_settings( @params );
( $cmd eq 'reindex'  )   and $app->command_reindex( @params );
( $cmd eq 'create'   ) and $app->command_create( @params );
( $cmd eq 'delete'   ) and index_delete   ( @params );
( $cmd eq 'put'      ) and index_put_doc  ( @params );
( $cmd eq 'search'   ) and index_search   ( @params );
( $cmd eq 'get'      ) and $app->command_get( @params );
( $cmd eq 'alias'    ) and index_alias    ( @params );
( $cmd eq 'unalias'  ) and index_unalias  ( @params );

exit 0;

sub index_delete {
    my ( $index ) = @_;

    my $result = $es->delete_index(
        index => $index,
        ignore_missing => 1,
    );
    warn "[ERROR] failed to delete index: $index\n" unless $result->{ok};
}

sub index_put_doc {
    my ( $index, $type, $doc ) = @_;

    my $json;
    eval {
        $json = decode_json( read_file($doc) );
        1;
    } or do {
        die "[ERROR] invlid json data in $doc\n";
    };

    $es->index(
        index => $index,
        type  => $type,
        data  => $json,
        create => 1
    );
}

sub index_search {
    my ( $index, $type, $string, $size ) = @_;

    my ( $field, $text ) = split q{:} => $string;
    my $query = {
        query_string => {
            default_field => $field,
            query         => $text,
        }
    };

    my $result = $es->search(
        index => $index,
        type  => $type,
        size  => $size || 24,
        query => $query,
        highlight => { fields => { $field => {} },
                       pre_tags  => [ '__STARTCOLOR__' ],
                       post_tags => [ '__ENDCOLOR__' ],
                     },
    );

    my @output =
        map { { id => $_->{_id},
                lines => $_->{highlight}{$field},
              }
            }
        @{ $result->{hits}{hits} };

    for my $o ( @output ) {
        for my $line ( @{ $o->{lines} } ) {
            $line =~ s/\n/ /g;
            $line =~ s/__STARTCOLOR__/color 'bold red'/eg;
            $line =~ s/__ENDCOLOR__/color 'reset'/eg;
            printf "%s: %s\n", colored ($o->{id}, 'cyan'), $line;
        }
    }
}

sub index_alias {
    my ( $index, $alias ) = @_;

    my $result = $es->aliases( actions => [
        { add => { index => $index, alias => $alias } }
    ] );
    warn "[ERROR] failed to create alias $alias for index $index\n" unless $result->{ok};
}

sub index_unalias {
    my ( $index, $alias ) = @_;

    my $result = $es->aliases( actions => [
        { remove => { index => $index, alias => $alias } }
    ] );
    warn "[ERROR] failed to remove alias $alias for index $index\n" unless $result->{ok};
}

__END__

=head1 NAME

es -- The command line client of ElasticSearch.

=head1 SYNOPSIS

    # List document count / size per index / type
    es ls
    es ls-types <index>
    es ls-aliases <index> # list aliases of an index

    # Create / delete an index
    es create <index>
    es delete <index>

    es get-settings <index>
    es get-mapping <index>
    es reindex <index_from> <index_to>

    # Indexing / getting a document
    es put <index> <doc> # doc needs to be a JSON file
    es get <name> <type> <doc_id>

    # Search by a field
    es search <name> <type> <field>:<search string> [<size>]

    # Aliasing
    es alias   <index-name> <alias>
    es unalias <index-name> <alias>

See `perldoc es` for more info.

=head1 DESCRIPTION

This program can be used to basic manipulation for day-to-day development need
with ElasticSearch server. The default server is C<localhost:9200>, to use
different server, you can change it with C<ELASTIC_SEARCH_SERVERS> environment variable.

    ESASTIC_SEARCH_SERVERS=search-server.company.com:9200

You may supply a list of servers seperate by comma

    ESASTIC_SEARCH_SERVERS=search-server-1.company.com:9200,search-server-2.company.com:9200

The list of servers are used in a round-robin manner, which is the default
behaviour of the underlying L<ElasticSearch> perl module.

=head1 COMMANDS

=head2 ls [<index sub-string>]

List all indices. Or if a sub-string is provided, list only matching ones.

=head2 ls-types <index>

List all document type of the given index.

=head2 ls-aliases <index>

List all aliases of the given index.

=head2 create <index> [--mapping mapping.json] [--settings settings.json]

Create the index. Optionally takes settings and mapping from JSON files. These
JSON files can be accquired by invoking L</get-settings> or L</get-mapping>
command on existing indices.

=head2 delete <index>

Delete the index

=head2 reindex <index_from> <index_to>

Reindex all documents in <index_from> into <index_to>. It is required that
<index_to> is created first.

=head2 get-mapping <index>

Get the mapping of an existing index. It prints the mapping in JSON text.

=head2 get-settings <index>

Get the settings of an existing index. It prints the settings in JSON text.
Something looks like this:

    {
       "index.number_of_replicas" : "1",
       "index.number_of_shards" : "5",
       "index.version.created" : "191099"
    }

=head2 alias <index> <alias>

Add an alias for the index.

=head2 unalias <index> <alias>

Remove an alias to the index.

=head2 put <index> <type> <doc>

Put the content of doc into the index.  <type> is the the documentation type.
<doc> must be a valid JSON file.

=head2 get <index> <type> <doc_id>

Print the specic document as JSON.

=head2 search <index> <type> <field>:<query_string>

Perform a simple text query. Need to provide field name and a query string.

=head1 AUTHORS

Mickey Nasriachi E<lt>mickey75@gmail.comE<gt>

Kang-min Liu E<lt>gugod@gugod.orgE<gt>


=head1 ACKNOWLEDGMENT

This module was originally developed for Booking.com. With approval from
Booking.com, this module was generalized and published on CPAN, for which the
authors would like to express their gratitude.

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2013 by Mickey Nasriachi

Copyright (C) 2013 by Kang-min Liu

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

